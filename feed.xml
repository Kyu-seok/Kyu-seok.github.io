<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-12-05T22:09:26+09:00</updated><id>/feed.xml</id><title type="html">Kyu’s blog</title><subtitle>IT 관련 지식과 경험을 공유해 드리는 블로그입니다. 주요 관심사로는 백엔드 엔지니어링, 자바, 데이터베이스, 네트워크, TDD, 리팩토링, 그리고 OOP와 FP 패러다임에 관심이 있습니다.</subtitle><author><name>염규석</name><email>yeumkyuseok@gmail.com</email></author><entry><title type="html">해커와 화가</title><link href="/%EB%8F%84%EC%84%9C/%ED%95%B4%EC%BB%A4%EC%99%80-%ED%99%94%EA%B0%80/" rel="alternate" type="text/html" title="해커와 화가" /><published>2024-12-04T10:07:00+09:00</published><updated>2024-12-04T10:07:00+09:00</updated><id>/%EB%8F%84%EC%84%9C/%ED%95%B4%EC%BB%A4%EC%99%80-%ED%99%94%EA%B0%80</id><content type="html" xml:base="/%EB%8F%84%EC%84%9C/%ED%95%B4%EC%BB%A4%EC%99%80-%ED%99%94%EA%B0%80/"><![CDATA[<p>책 소개에 앞서, 이 책은 와이 컴비네이터의 창업자인 폴 그레이엄이 쓴 에세이들을 모아놓은 책이다.
와이 콤비네이터는 명실상부 가장 유명한 스타트업 엑셀러레이터인데, 여기에서 키워낸 대표적인 기업이 트위치, 에어비엔비, 그리고 한국인에게는 유명한 센드버드 등이 있다.
폴 그레이엄은 굉장히 특이한 이력 들을 가졌는데, 우선 학부는 철학과를 나왔고, 석박사 과정은 컴퓨터를 공부했으며, 미술에도 굉장히 관심이 있어 유명한 미술 학교도 나왔다.</p>

<p>그런 그의 철학적 사유와, 프로그래머이자 창업가인 동시에 예술가인 그만의 생각들을 담아낸 책이 바로 해커와 화가라는 책이고, 개인적으로 가장 좋아하는 책중에 하나이다.</p>

<p>이 책의 제목이 ‘해커’와 화가 이기 때문에, 우리들이 보편적으로 생각하는 해커(영화에서 나오는 사이버전에 그 해커)를 생각하기 쉽다.
하지만 폴 그레이엄이 지칭하는 이 ‘해커’라는 단어는 컴퓨터의 태동기에 MIT에서 생겨난 해커문화의 그 해커, 그리고 컴퓨터에 완전히 통달해서, 모두가 아는 정석대로가 아니라 완전히 이해해야만 할수 있는 시스템의 구멍등을 활용해, 생각치도 못한 창의적인 방법으로 문제를 해결하는 사람들을 지칭한다.</p>

<p>기대?와 다르게 이 책에서는 기술적인 이야기만 하지 않는다. 오히려 다음과 같이 다양한 분야들을 이야기 하는데, 이 책의 내용들을 소개하겠다.</p>

<h2 id="해커와-화가--프로그래밍의-예술적-접근">해커와 화가 : 프로그래밍의 예술적 접근</h2>

<p>우리는 대학교에서 프로그래밍을 배울때, 설계부터 완벽히 하고, 그 다음 프로그래밍을 시작하라고 배운다. 요구사항 분석, functional requirements, non-functional requirements 등등을 다 파악하고, 시퀀스 다이어그램을 그린 다음에서야 프로그래밍을 시작하라고 배운다. 하지만 폴 그레이엄은 이 방법은 잘못되었다고 주장한다. 소설가, 화가, 그리고 건축가의 작업이 그런 것처럼 프로그램이란 전체 모습을 미리 알수 있는 것이 아니라 작성해 나가면서 이해하게 되는 존재라는 것이다.</p>

<p>그는 이런 측면에서 해커와 화가는 동일하다고 생각한다. 무에서 유를 창조 하는 행위 말이다.
빈 스케치에서 그림의 골자를 스케치 하듯이, 빈 파일에 큰틀의 코드들을 작성하고, 그 내부의 디테일들을 체워가는, 이런 방식 말이다.</p>

<p>그리고 화가에게 필요 한것은 볼펜이 아니라 연필이다. 바로 실수를 하면 지우거나 스케치를 필요할때마다 바로 잡을수 있는 연필.
해커에게 이런 도구는 바로 프로그래밍 언어이다.
이런 이유로 그는 동적 타이핑 언어를 선호한다. 마을껏 내갈기고, 더럽히고, 사방에 떡칠할 수 있는 언어를.
책을 끝까지 보면 알겠지만 그가 지칭하는 이 언어는 바로 리스프이다.
요즘은 각광 받는 러스트는 빠르고 안전한 프로그래밍을 할수 있지만, 요구사항이 변경되면 코드 변경이 어렵다는 단점이 있다. 이는 러스트가 연필보다 펜에 가까운 언어가 아닐까?</p>

<h2 id="창업--소수-정예와-빠른-실행의-중요성">창업 : 소수 정예와 빠른 실행의 중요성</h2>

<p><code class="language-plaintext highlighter-rouge">스타트업의 신</code> (별명은 해당 <a href="https://news.mtn.co.kr/news-detail/2017082010100121020">기사</a>를 참조)이라고 불리는 그의 창업 관련된 인사이트들은 이 책에서 가장 귀한 부분들이다.
그는 Viaweb 이라는 소규모 상점 생성 서비스를 창업해, 성공적으로 야후에게 팔았다.
그의 창업 관련된 경험과 팁들은 다음과 같다.</p>

<ul>
  <li>소수 정예가 낫다. 최고의 실력을 가진 창업 멤버를 최소한으로 유지 하라. 맨먼스 미신을 인용하며 <code class="language-plaintext highlighter-rouge">"프로젝트에 사람을 더 많이 투입하는 것은 오히려 프로젝트의 진행 속도를 둔화시킨다."</code></li>
  <li>고객이 사용하고 싶어할 만큼 간단하고 깔끔한 소프트웨어를 만드는데에서 출발하고, 1.0 버전을 빠르게 내놓은 다음 사용자의 반응에 신중하게 귀를 기울이면서 개선해 나가라.</li>
  <li>소프트웨어에 추가할수 있는 기능이 두 가지 있을 때, 언제나 어려운 쪽을 선택하라. 더 많은 가치가 아니라 더 어렵기 때문이다. 덩치가 큰 기업들은 무겁다. 그들은 어떤 결정을 할때도 프로세스가 복잡하기 때문이다. 하지만 소규모의 정예 인원을 가지고 있는 스타트업은 다르다. 그들은 Agile 하게 움직일수 있고, 그렇기 때문에 그들이 따라오지 못하는 것을 의식적으로 선택해서 선점하라.</li>
  <li>스타트업의 가장 중요한 지표는 사용자의 수다. 어떤 기술이 사용되었는지는 생각보다 중요하지 않다. (폴 그레이엄이 여기서 말하고자 하는 것은 굳이 시장에서 유행하는 기술을 고집할 필요는 없다는 것으로 해석된다)</li>
  <li>너무 많은 기능을 붙잡고 꾸물거리지 말고 최대한 빨리 1.0 버전을 내놓아야 한다. 소프트웨어의 성공 여부를 정확하게 평가할 수 있는 사용자가 존재하기 전에 수행하는 최적화는 모두 근거 없는 추측에 불과할 뿐이다.</li>
</ul>

<h2 id="프로그래밍-언어--언어의-관한-그의-생각">프로그래밍 언어 : 언어의 관한 그의 생각</h2>

<p>프로그래밍 언어의 관한 그의 생각들이다.</p>

<ul>
  <li>정적 타입은 안전벨트 일수도 있지만 수갑일수도 있다. (폴 그레이엄은 개인적으로는 동적 타입을 선호하지만, 그의 말에 따르면 뛰어난 프로그래머들은 정적 타입을 선호하는 경항이 있다고 한다)</li>
  <li>객체지향은 수준 높은 프로그래머들에게 주는 이득은 별로 없지만, 큰 조직에서는 객체지향에 대한 유혹을 견디기 어렵다. 복잡한 스파게티 코드 베이스에 기능을 추가하려면 그에 대한 코드를 적당한 위치에 집어 넣고 코드의 나머지 부분은 아예 열어보지 않아도 되기 때문이다.</li>
  <li>스타트업은 빠른 개발(rapid development)이 중요하다. 고수준 언어인 리스프를 사용해서 경쟁자들보다 빠르게 기능을 구현할수 있었다. 스타트업이라면 고수준 언어를 통한 빠른 개발을 추천한다.</li>
  <li>프로그래밍은 습관이다. 프로그래머들이 자발적으로 언어를 바꾸는 일은 없다. 어떤 언어든지 일단 이용하기 시작했으면, 그냥 그 언어가 최선이라고 생각해 버린다.</li>
  <li>매크로를 적극 사용해서 프로그래밍의 효율을 높여라. 리스프의 매크로를 사용해서 비아웹 편집기의 소스코드중 20~25%는 매크로로 이루어졌다. 꼭 필요한곳에만 매크로를 사용했는데, 이것은 곧 코드의 20%~25% 정도는 다른 언어로는 쉽게 작성할 수 없는 기능을 수행하고 있다는 말이 된다.</li>
  <li>프로그래밍 언어는 그저 테크놀로지가 아니라 프로그래머들이 생각할때 사용하는 언어이다. 그것은 반쯤은 테크놀로지이고 반쯤은 종교이다.</li>
  <li>1950년대에 탄생한 리스프라는 언어가 오늘날에도 여전히 유효한 이유에 대한 간단한 설명은 바로 그것이 단순히 테크놀로지가 아니라 수학이였다는 사실일 것이다.</li>
</ul>

<h2 id="나의-생각">나의 생각</h2>

<ul>
  <li>과연 리스프를 지금도 쓰는 신생 스타트업이 과연 있을까?</li>
  <li>우선 책을 읽고 나니 캐캐묵은 언어라고 생각했던 펄이 멋있어 보인다. 대학교때 잠깐 스크립트 용으로 찍먹해봤을때는 이상한 기호들도 많고 우아한 언어랑은 거리가 멀다고 생각했는데, 이 책을 읽고 나니 펄을 사용하는 사람은 해커처럼 보게 되었다.</li>
  <li>폴 그레이엄이 리스프에 대해 칭찬한 거의 모든것에 엘릭서를 치환시킬수 있다. 엘릭서의 메타 프로그래밍은 리스프의 메타 프로그래밍의 영항을 받았고, 폴 그레이엄이 말하는 함수형의 장점, 빠른 개발 주기, 그리고 동적 언어 라는 점에서 까지 비슷하다. 그래서 엘릭서를 배워서 마음껏 사용할 생각에 희망 회로를 돌리며 읽은 책.</li>
  <li>프로그래밍 언어는 반쯤 종교라는 말은 명언이다. 그런데 폴 그레이엄도 이 말에서 빠져나갈수는 없긴 하다. 물론 그가 주장하는 논증을 뒷바침 하는 논리는 정말 탄탄하다.</li>
  <li>아직 잘 알지 못하는 함수형 프로그래밍과 메타 프로그래밍이 대체 얼마나 대단하길래 이럴까 라는 생각을 하게 되었다.</li>
  <li>스타트업 창업과 성장은 무조건 소수정예로.</li>
  <li>추가로 오늘 우연히 lichess 라는 서비스를 알게되었는데, chess.com 과 더불어 체스 관련 서비스중 두번째로 큰 서비스였다. 그런데 흥미로운 점은 chess.com 은 800명 이 넘는 직원이 있는 반면에, lichess는 창시자 <code class="language-plaintext highlighter-rouge">Thibault</code> 단 한명이서 최근까지도 전부 개발 및 운영을 하다가, 최근에서야 직원을 무려 한명 더 뽑아서 플러터로 핸드폰 앱까지 개발한다는 사실이였다 (물론 오픈소스라 컨트리뷰터가 있긴 하지만 그가 압도적인 메이져 컨트리뷰터라고 함). 그가 사용하는 언어는 함수형 언어인 스칼라이고, 함수형 언어의 장점을 적극 활용한것으로 보인다 (그가 트윗하기로는 다시 lichess를 만들수 있다면 하스켈을 사용할것이라고 함). 추가적으로 서버 하나에서 모노리식 방식으로 운영을 하고 있는데, 이러한 방식도 소수정예 방식에 부합하는것 같다. 이 책 해커와 화가에서 말하는 소수 정예, 함수형 프로그래밍, 빠른 개발 주기 및 시장 검증등 Thibault 가 이 책에서 말하는것과 굉장히 오버랩 되어보였다. 이런 경험을 하게 된다면 정말 재미있을것 같다.</li>
  <li>마지막으로 극단적 리스프 문법 맛보기 ((()) ())</li>
</ul>

<pre><code class="language-Lisp">(defun extreme-lisp-example ()
  (eval
   `(progn
      (defun self-replicating ()
        (princ ',(list 'defun 'self-replicating
                       (list 'quote nil)
                       (list 'princ
                             (list 'quote
                                   (list 'defun 'self-replicating
                                         (list 'quote nil)
                                         (list 'princ ',(list 'defun 'self-replicating
                                                              (list 'quote nil)
                                                              (list 'princ ',(list 'defun 'self-replicating nil nil))))))))))
      (self-replicating))))

</code></pre>

<p><del>그만 알아보자</del></p>]]></content><author><name>염규석</name><email>yeumkyuseok@gmail.com</email></author><category term="도서" /><category term="Software" /><category term="Java" /><category term="Lisp" /><category term="Elixir" /><summary type="html"><![CDATA[책 소개에 앞서, 이 책은 와이 컴비네이터의 창업자인 폴 그레이엄이 쓴 에세이들을 모아놓은 책이다. 와이 콤비네이터는 명실상부 가장 유명한 스타트업 엑셀러레이터인데, 여기에서 키워낸 대표적인 기업이 트위치, 에어비엔비, 그리고 한국인에게는 유명한 센드버드 등이 있다. 폴 그레이엄은 굉장히 특이한 이력 들을 가졌는데, 우선 학부는 철학과를 나왔고, 석박사 과정은 컴퓨터를 공부했으며, 미술에도 굉장히 관심이 있어 유명한 미술 학교도 나왔다.]]></summary></entry><entry><title type="html">Title of Your Post</title><link href="/test-wide/" rel="alternate" type="text/html" title="Title of Your Post" /><published>2024-06-07T00:00:00+09:00</published><updated>2024-06-07T00:00:00+09:00</updated><id>/test-wide</id><content type="html" xml:base="/test-wide/"><![CDATA[<h1 id="test">Test</h1>

<h2 id="nested-and-mixed-lists-are-an-interesting-beast-its-a-corner-case-to-make-sure-that">Nested and mixed lists are an interesting beast. It’s a corner case to make sure that</h2>

<h3 id="lists-within-lists-do-not-break-the-ordered-list-numbering-order">Lists within lists do not break the ordered list numbering order</h3>

<p>Your list styles go deep enough.</p>

<h4 id="ordered--unordered--orderedpermalink">Ordered – Unordered – OrderedPermalink</h4>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />ordered item</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />ordered item</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />unordered</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />unordered</li>
</ul>

<ol>
  <li>ordered item</li>
  <li>ordered item</li>
  <li>ordered item</li>
  <li>ordered item</li>
</ol>

<h4 id="ordered--unordered--unorderedpermalink">Ordered – Unordered – UnorderedPermalink</h4>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />ordered item</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />ordered item</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />unordered</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />unordered</li>
</ul>

<ol>
  <li>ordered item</li>
  <li>ordered item</li>
  <li>ordered item</li>
  <li>ordered item</li>
</ol>

<h3 id="test-2">Test 2</h3>

<h4 id="unordered--ordered--unorderedpermalink">Unordered – Ordered – UnorderedPermalink</h4>

<p>unordered item
unordered item
ordered
ordered
unordered item
unordered item
unordered item
unordered item
Unordered – Unordered – OrderedPermalink
unordered item
unordered item
unordered
unordered
ordered item
ordered item
unordered item
unordered item</p>]]></content><author><name>염규석</name><email>yeumkyuseok@gmail.com</email></author><summary type="html"><![CDATA[Test]]></summary></entry><entry><title type="html">Test Draft Markdown post</title><link href="/%EB%8F%85%ED%9B%84%EA%B0%90/%EC%9D%BC%EC%83%81/life/test_draft/" rel="alternate" type="text/html" title="Test Draft Markdown post" /><published>2024-06-06T19:20:49+09:00</published><updated>2024-06-06T19:20:49+09:00</updated><id>/%EB%8F%85%ED%9B%84%EA%B0%90/%EC%9D%BC%EC%83%81/life/test_draft</id><content type="html" xml:base="/%EB%8F%85%ED%9B%84%EA%B0%90/%EC%9D%BC%EC%83%81/life/test_draft/"><![CDATA[<h1 id="test-draft">Test draft</h1>

<h2 id="hello-world">Hello world</h2>

<h3 id="todo-list">TODO List</h3>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />todo 1</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />todo 2</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />todo 3</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />todo 4</li>
</ul>

<h3 id="numberings">numberings</h3>

<ol>
  <li>here</li>
  <li>is the</li>
  <li>test</li>
  <li>numberings</li>
</ol>]]></content><author><name>염규석</name><email>yeumkyuseok@gmail.com</email></author><category term="독후감" /><category term="일상" /><category term="life" /><category term="test" /><category term="software" /><category term="java" /><summary type="html"><![CDATA[Test draft]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-06-06T19:20:49+09:00</published><updated>2024-06-06T19:20:49+09:00</updated><id>/jekyll/update/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, World!"</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="err">\</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">'Tom'</span><span class="p">;</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, World!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>염규석</name><email>yeumkyuseok@gmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>